# -*- coding: utf-8 -*-
"""RL-Breakout.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g1QG3_vZokfuRpy3yVvtXhXKVNoibsGj
"""

import gym
import os
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.evaluation import evaluate_policy
from stable_baselines3.common.vec_env import VecFrameStack
from stable_baselines3.common.env_util import make_atari_env

env_name = 'Breakout-v0'
env = gym.make(env_name)

episodes = 100
for episode in range(1,episodes+1):
  state = env.reset()
  done = False
  score = 0

  while not done:
    env.render(mode='rgb_array')
    action = env.action_space.sample()
    n_state, reward, done, info = env.step(action)
    score+=reward
  print('Episode:{} Score:{}'.format(episode, score))
env.close()

#env = make_atari_env('Breakout-v0',n_envs=4,seed=0)
#env = VecFrameStack(env,n_stack=4)
env = gym.make(env_name)
env = DummyVecEnv([lambda:env])

model = PPO('MlpPolicy', env,verbose=1 )

model.learn(total_timesteps=10000)

ppo_path = os.path.join('Training','Saved Models','PPO_models')

model.save(ppo_path)

del model

model = PPO.load(ppo_path,env=env)

model.learn(total_timesteps=10000)

evaluate_policy(model,env,n_eval_episodes=10,render=False)

env.close()

epochs = 100
for epoch in range(1, epochs+1):
    obs = env.reset()
    done = False
    score = 0
    
    while not done:
        env.render(mode='rgb_array')
        action,_ = model.predict(obs)
        obs, reward, done, info = env.step(action)
        score +=reward
        
    print('Episode:{} Score:{}'.format(epoch,score))

from stable_baselines3.common.callbacks import EvalCallback, StopTrainingOnRewardThreshold
import os

save_path = os.path.join('Training','Saved Models')
log_path = os.path.join('Training','Logs')

env = gym.make(env_name)
env = DummyVecEnv([lambda:env])

stop_callback = StopTrainingOnRewardThreshold(reward_threshold=190, verbose=1)

eval_callback = EvalCallback(env, 
                            callback_on_new_best=stop_callback,
                            eval_freq=10000,
                            best_model_save_path=save_path,
                            verbose=1)

model = PPO('MlpPolicy',env,verbose=1)

model.learn(total_timesteps=20000,callback = eval_callback)

model_path = os.path.join('Training','Saved Models','best_model')
model = PPO.load(model_path,env=env)

evaluate_policy(model, env, n_eval_episodes=10,render=False)















pip install stable-baselines3

pip install gym[atari,accept-rom-license]==0.21.0